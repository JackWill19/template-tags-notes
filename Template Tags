<?php

/* TEMPLATE TAGS */

/*

// the_ VS get_the_

the_title(); // Echoes the title
get_the_title(); // Gets or Returns the title

// Template Tags can accept parameters

<h1><?php the_title(); ?></h1> // Both of these result in the same outcome
<?php the_title('<h1>', '</h1>') ?>

the_title($before, $after, $echo); // the_title accepts multiple parameters, before (what prepends to the title), after(what appends to the title) and echo (if it should be echoed)


// Template Tag Filters - Hook

// function wphierarchy_title_markup($title, $id = null) {
//     if(!is_singular() && in_the_loop()) { // Checking to see if this is not a singular post and that its inside the loop
//         $title = '<h2><a href="' . get_permalink($id) . '">' . $title . '</a></h2>'; // Making sure that title is a h2 tag with a link to the related page
//     } else if (is_singlular() && in_the_loop()) { // Then checks if is a single post
//         $title = '<h1>' . $title . '</h1>';
//     }
//     return $title;
// }

// add_filter('the_title', 'wphierarchy_title_markup', 10, 2);


// GENERAL TAGS

// Include Tags
    //get_header(); // Includes the header template for the theme, typically includes site title, logo, main nav and socials

    //get_footer(); // Includes the footer template for the theme, contains copyright, privacy policy, socials, newsletter etc.

    //get_sidebar(); // Includes the sidebar for the theme, can include recent posts, search bar, categories

    //get_template_part(); // Allows you to include a template part in your theme, typically reusable pieces of code, often used with a loop

    //get_search_form(); // Includes the searchform template for a theme

    //comments_template(); // Includes comments template for the theme


// Login Tags
    // wp_loginout(); // a function that displays a log in or log out link depending on if youre logged in or not

    // wp_logout_url(); // a function that generates a log out url for the current site which will log the user out of the site

    // wp_login_url(); // a function that generates a log in url for the current site which will log the user into the site

    // wp_login_form(); // Displays a log in form for the site, includes a user, password field and submit button

    // wp_lostpassword_url(); // generates a lost password page, when clicked will take the user to a form where they can get a passord reset email

    // wp_register(); // displays a reg form for the site, takes a username, email, password and a submit button

    // is_user_logged_in(); // checks if the user is logged in



// bloginfo

<?php bloginfo('name'); ?> // Shows Site Title
<?php bloginfo('description'); ?> // Shows Site Description
<?php bloginfo('url'); ?> // Shows Site Address

<?php $site_title = get_bloginfo('url'); ?> // Saves Site Title

*/

// ARCHIVE TAGS

// single_post_title(); // Displays the title of a single post, should be used in a loop

// post_type_archive_title(); // Displays the title of a post type archive page
//                            // A post type archive page is a page that lists all of the posts of a particular post type, 
//                            // such as a page that lists all of the posts in a specific category.

// single_cat_title(); // Displays the title of a single category archive page
//                     // A category archive page is a page that lists all of the posts in a specific category.

// single_tag_title(); // Displays the title of a single tag archive page
//                     // A tag archive page is a page that lists all of the posts with a specific tag.

// single_term_title(); // Displays the title of a single term archive page
//                      // A term archive page is a page that lists all of the posts with a specific term from a taxonomy 
//                      // (a way of grouping posts by a common attribute).

// get_archives_link(); // Returns a link to an archive page for a given month or year 
//                      // can be used to create a list of links to monthly or yearly archives of posts on a WordPress website.

// wp_enqueue_script($handle, $src, $deps, $ver, $in_footer); // A function used to include JS files into a Wordpress theme or plugin

// add_action(); // a function used to add custom functionality to a wordpress site, a way of "HOOKING" a function to a specific
//               // point in the wordpress code so it can be executed at a specific time.

// calendar_week_mod(); // Function that calculates the week of the year for a given date, returns between 1 and 53.

// get_calendar(); // Generates a calender for the current month and displays it on a site

// delete_get_calendar_cache(); // is a function that clears the cache for the get_calendar() function. 
//                              // This can be useful if the calendar needs to be regenerated for some reason.

// allowed_tags(); // Returns an array of allowed HTML tags and attributes which are safe to use in WP


// // Navigation Tags

// // Arguments being set to be passed in wp_nav_menu().
// $args = [
// // This argument specifies the theme location of the menu.
//     'theme_location' => 'main-menu', 
// // This argument specifies the name of the menu that should be displayed.
//     'menu' => 'Main Menu', 
// // This argument specifies the HTML element that should be used to wrap the menu.
//     'container' => 'nav', 
// // This argument specifies the class of the HTML element that wraps the menu.
//     'container_class' => 'container-class', 
// // This argument specifies the HTML structure that should be used to wrap the menu items.
//     'items_wrap' => '<ul id="%1$s" class="%2$s">%3$s</ul>', 
// // This argument specifies the class of the wrapper element for the menu items.
//     'menu_class' => 'items-wrap-class', 
// // This argument specifies the ID of the wrapper element for the menu items.
//     'menu_id' => 'items-wrap-id', 
// // This argument specifies text that should be added before the menu item link text.
//     'link_before' => '', 
// // This argument specifies text that should be added after the menu item link text.
//     'link_after' => '', 
//     'before' => '',
//     'after' => '',
// // This argument specifies the depth of child menu items that should be displayed. 
// // A value of 0 means that all child menu items will be displayed.
//     'depth' => 0,
// // This argument specifies a fallback callback function that should be used if the specified menu is not available.
//     'fallback_cb' => 'wp_page_menu',
// ];

// wp_nav_menu($args); // Calling the set arguments in the $args array

// walk_nav_menu_tree($items, $depth, $r);

// // A function in WordPress that is used to register a new navigation menu location for use in a theme.
// // It is typically used in the theme's functions.php file
// register_nav_menus([
//     'main-menu' => esc_html__('Main Menu', 'wptags'),
// ]); 


// POST TAGS - COMMON TAGS

// the_ID(); // Displays the ID of the current post in the loop

// the_title(); // Displays the title of the current post in the loop

// the_content(); // Displays the content of current post in the loop

// the_excerpt(); // Displays the excerpt of the current post in the loop. Excerpt is a summary of the posts content

// the_category(); // Displays the categories that the current post is assigned to

// the_tags(); // displays the tags that are assigned to the current post


// POST TAGS - DATE TAGS

// the_date(); // Displays the date on which the current post was published

// the_time(); // Displays the time when the post was published

// the_modified_date(); // Displays the date on which the current post was last modified

// the_modified_time(); // Displays the time in which the current post was lasr modified


// POST TAGS - LESS COMMON TAGS

// the_permalink($post); // Displays the permalink URL for the current post in the loop

// get_the_permalink($post, $leavename); // Grabs the permalink and returns it as a string.  
//                                       // $post parameter allows you to specify a post object that you want the permalink for.

// the_title_attribute($args); // Displays the title attribute for the current post in the loop.

// the_shortlink($text, $title, $before, $after); // Displays a short URL for the current post in the loop.

// wp_get_shortlink($id, $context, $allow_slugs); // Returns the short URL as a string instead of displaying it

// the_meta(); // displays the custom fields for the current post in the loop

// get_post_meta($post_id, $key, $single); // Retrieves the value of a specific custom field for a given post

// POST THUMBNAILS

// Enabled in functions.php by using the following code

add_theme_support('post-thumbnails');
// or
add_theme_support('post-thumbnails', ['post', 'page']);

has_post_thumbnail(); // Checks if post has thumbnail

the_post_thumbnail(); // Displays the post thumbnail

get_the_post_thumbnail(); // Returns the post thumbnail without displaying it

get_post_thumbnail_id(); // Returns the thumbnail ID as a string